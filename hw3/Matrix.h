#include <iostream>using namespace std;class Matrix {		public:		Matrix();//default constructor		~Matrix();//destructor		Matrix(const Matrix& m);//copy constructor		Matrix(unsigned int r, unsigned int c, double f);//main constructor		Matrix& operator=(const Matrix& m);//assignment operator		bool operator==(const Matrix& m) const;//== operator		bool operator!=(const Matrix& m) const;//!= operator		unsigned int num_rows() const;//returns rows		unsigned int num_cols() const;//returns cols		void clear();//clears the matrix		bool get(unsigned int r, unsigned int c, double& val) const;//returns an element of the matrix in val		bool set(unsigned int r, unsigned int c, double val);//sets an element of the matrix		void multiply_by_coefficient(double d);//multiplies the matrix by a number		bool swap_row(unsigned int r1, unsigned int r2);//swaps two rows		void transpose();//transposes the matrix		bool add(const Matrix& m);//adds a matrix to this matrix		bool subtract(const Matrix& m);//subtracts a matrix to this matrix		double* get_row(unsigned int r);//returns a row of the matrix		double* get_col(unsigned int c);//returns a column of the matrix		Matrix* quarter() const;//returns an array of matricies that is this matrix quartered					private:		double** mat;//2d array that makes up the matrix		unsigned int rows, cols;//number of rows, number of columns						};ostream& operator<< (ostream& out, const Matrix& m);//output operator